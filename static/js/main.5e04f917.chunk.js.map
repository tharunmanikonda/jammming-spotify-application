{"version":3,"sources":["util/Spotify.js","Components/Track/Track.js","Components/Tracklist/Tracklist.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/SearchBar/SearchBar.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","Track","props","addTrack","bind","removeTrack","this","isRemoval","className","onClick","onAdd","track","onRemove","name","artist","album","renderAction","React","Component","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","e","newName","target","value","onNameChange","defaultValue","onChange","Playlisttracks","onSave","SearchBar","state","term","search","handleTearmChange","onSearch","newTerm","setState","placeholder","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","PlaylistName","PlaylistTracks","updatePlaylistName","find","savedTrack","push","filter","currentTrack","playlistName","playlistTracks","playlistname","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e04f917.chunk.js","sourcesContent":["const clientId = '05704e9ef8ee40158f8a91f3765c7231';\r\nconst redirectUri = \"https://www.google.com/\";\r\n\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      accessToken = accessTokenMatch[1];\r\n      const expiresIn = Number(expiresInMatch[1]);\r\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n      window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\r\n      return accessToken;\r\n    } else {\r\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n      window.location = accessUrl;\r\n    }\r\n  },\r\n\r\n  search(term) {\r\n    const accessToken = Spotify.getAccessToken();\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`\r\n      }\r\n    }).then(response => {\r\n      return response.json();\r\n    }).then(jsonResponse => {\r\n      if (!jsonResponse.tracks) {\r\n        return [];\r\n      }\r\n      return jsonResponse.tracks.items.map(track => ({\r\n        id: track.id,\r\n        name: track.name,\r\n        artist: track.artists[0].name,\r\n        album: track.album.name,\r\n        uri: track.uri\r\n      }));\r\n    });\r\n  },\r\n\r\n  savePlaylist(name, trackUris) {\r\n    if (!name || !trackUris.length) {\r\n      return;\r\n    }\r\n\r\n    const accessToken = Spotify.getAccessToken();\r\n    const headers = { Authorization: `Bearer ${accessToken}` };\r\n    let userId;\r\n\r\n    return fetch('https://api.spotify.com/v1/me', {headers: headers}\r\n    ).then(response => response.json()\r\n    ).then(jsonResponse => {\r\n      userId = jsonResponse.id;\r\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n        headers: headers,\r\n        method: 'POST',\r\n        body: JSON.stringify({name: name})\r\n      }).then(response => response.json()\r\n      ).then(jsonResponse => {\r\n        const playlistId = jsonResponse.id;\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n          headers: headers,\r\n          method: 'POST',\r\n          body: JSON.stringify({uris: trackUris})\r\n        });\r\n      });\r\n    });\r\n  }\r\n};\r\n\r\nexport default Spotify;\r\n","import React from \"react\";\r\n\r\nimport \"./Track.css\";\r\n\r\nexport class Track extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n\r\n    }\r\n    renderAction(){\r\n        if(this.props.isRemoval){\r\n            return <button className =\"Track-action\" onClick = {this.removeTrack}>-</button>\r\n        }\r\n        else {\r\n            return <button className =\"Track-action\" onClick = {this.addTrack}>+</button>\r\n        }\r\n    };\r\n    addTrack(){\r\n        this.props.onAdd(this.props.track);\r\n\r\n    };\r\n    removeTrack(){\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                     <h3> {this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album} </p>\r\n                </div>\r\n            \r\n                    {this.renderAction()}\r\n                    \r\n            </div>\r\n        )\r\n    }\r\n} ","import React from \"react\";\r\nimport './Tracklist.css';\r\nimport { Track } from \"../Track/Track\";\r\nexport class TrackList extends React.Component {\r\n   \r\n    render() {\r\n\r\n        return (\r\n            <div className=\"TrackList\">\r\n                {\r\n                this.props.tracks.map(track => {\r\n                    return <Track track = {track} \r\n                    key = {track.id} onAdd = {this.props.onAdd} onRemove = {this.props.onRemove}\r\n                    isRemoval = {this.props.isRemoval}/>\r\n                })}\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport { TrackList } from \"../Tracklist/Tracklist\";\r\nimport \"./SearchResults.css\";\r\n\r\n\r\nexport class SearchResults extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList tracks = {this.props.searchResults} onAdd = {this.props.onAdd} isRemoval = {false}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { TrackList } from '../Tracklist/Tracklist';\r\nimport './Playlist.css';\r\nexport class Playlist extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n    handleNameChange(e){\r\n    let newName = e.target.value;\r\n    this.props.onNameChange(newName);\r\n    }\r\n    render () {\r\n        return (\r\n            <div className=\"Playlist\">\r\n                <input defaultValue={\"New Playlist\"} onChange = {this.handleNameChange}/>\r\n                <TrackList tracks ={this.props.Playlisttracks} onRemove = {this.props.onRemove} isRemoval = {true}/>\r\n                <button className=\"Playlist-save\" onClick = {this.props.onSave}>SAVE TO SPOTIFY</button>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nimport './SearchBar.css'\r\n\r\nexport class SearchBar extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            term:''\r\n        }\r\n\r\n        this.search = this.search.bind(this);\r\n        this.handleTearmChange = this.handleTearmChange.bind(this);\r\n            \r\n    }\r\n    search(){\r\n        this.props.onSearch(this.state.term);\r\n    }\r\n    handleTearmChange(e){\r\n        let newTerm = e.target.value;\r\n        this.setState({term:newTerm})\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input placeholder=\"Enter A Song, Album, or Artist\"   onChange = {this.handleTearmChange}/>\r\n                <button className=\"SearchButton\" onClick = {this.search} >SEARCH</button>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","// import logo from './logo.svg';\nimport React from 'react';\nimport { SearchResults } from '../SearchResults/SearchResults';\nimport { Playlist } from '../Playlist/Playlist';\nimport { SearchBar } from '../SearchBar/SearchBar';\nimport './App.css';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {searchResults :[],\n  PlaylistName :'playlistname',\n  PlaylistTracks:[]\n\n  }\n  this.addTrack = this.addTrack.bind(this);\n  this.removeTrack = this.removeTrack.bind(this);\n  this.updatePlaylistName = this.updatePlaylistName.bind(this);\n  this.savePlaylist = this.savePlaylist.bind(this); \n  this.search = this.search.bind(this); \n}\n  addTrack(track) {\n    let tracks = this.state.PlaylistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)){\n      return;\n    }\n    tracks.push(track);\n    this.setState({PlaylistTracks:tracks});\n    \n  }\n  removeTrack(track){\n    let tracks = this.state.PlaylistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n    this.setState({PlaylistTracks:tracks})\n  \n  }\n  updatePlaylistName(name){\n    this.setState({PlaylistName:name});\n\n  }\n  savePlaylist() {\n    debugger\n    const trackUris = this.state.PlaylistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.PlaylistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      });\n    });\n  }\n  // savePlaylist(){\n  //   const tracksUris = this.props.PlaylistTracks.map(track => {\n  //     return track.uri;\n  //   });\n  //   Spotify.savePlaylist(this.state.PlaylistName,tracksUris).then(()=>{\n  //   this.setState({\n  //     playlistname : 'New Playlist',\n  //     PlaylistTracks: []\n  //   })\n  //   })\n  // }\n  search(term){\n    Spotify.search(term).then(searchResults =>{\n      this.setState({\n        searchResults:searchResults\n      })\n    });\n  }\n\n  render() {\n    return (\n    <div>\n  <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n  <div className=\"App\">\n    <SearchBar onSearch = {this.search}/>\n    <div className=\"App-playlist\">\n      <SearchResults searchResults = {this.state.searchResults} onAdd = {this.addTrack}/>\n      <Playlist playlistname = {this.state.PlaylistName} Playlisttracks = {this.state.PlaylistTracks} \n      onRemove = {this.removeTrack} onNameChange = {this.updatePlaylistName} \n      onSave = {this.savePlaylist}/>\n    </div>\n  </div>\n</div>\n  );\n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}